---
permalink: "notes/{{ page.fileSlug | slugify }}/"
---
<!DOCTYPE html>
<html lang="{{ meta.mainLanguage }}">
  <head>
    <title>{% if title %}{{ title }}{% else %}{{ page.fileSlug }}{% endif %}</title>
    {%include "components/pageheader.njk"%}
    {% for imp in dynamics.common.head %}
      {% include imp %}
    {% endfor %}
    {% for imp in dynamics.notes.head %}
      {% include imp %}
    {% endfor %}
  </head>
  <body class="theme-{{meta.baseTheme}} markdown-preview-view markdown-rendered markdown-preview-section {{meta.bodyClasses}}">
    {%include "components/notegrowthhistory.njk"%}
    
    {% if settings.dgShowFileTree !== true %}
      {%include "components/navbar.njk"%}
    {%else%}
      {%include "components/filetree.njk"%}
    {% endif %}

    {% if settings.dgEnableSearch === true %}
      {%include "components/searchContainer.njk"%}
    {% endif %}

    <main class="content cm-s-obsidian {{contentClasses}}">
      <header>
        {% if settings.dgShowInlineTitle === true %}
          <h1 data-note-icon="{% if noteIcon %}{{noteIcon}}{% else %}{{meta.noteIconsSettings.default}}{% endif %}">{% if title %}{{ title }}{% else %}{{ page.fileSlug }}{% endif %}</h1>
        {% endif %}
        <div class="header-meta">
          {% if settings.dgShowTags === true and tags %}
            <div class="header-tags">
              {% for tag in tags %}
                {% if tag != 'gardenEntry' and tag !='note' %}
                  <a class="tag" onclick="toggleTagSearch(this)">
                    #{{tag}}
                  </a>
                {% endif %}
              {% endfor %}
            </div>
          {% endif %}
          {%- if meta.timestampSettings.showCreated or meta.timestampSettings.showUpdated -%}
          <div class="timestamps">
            {%- if meta.timestampSettings.showCreated and created -%}
            <div><i icon-name="calendar-plus"></i> <span class="human-date" data-date="{{created}}"></span></div>
            {%- endif -%}
            {%- if meta.timestampSettings.showUpdated and updated -%}
            <div><i icon-name="calendar-clock"></i> <span class="human-date" data-date="{{updated}}"></span></div>
            {%- endif -%}
          </div>
          {%- endif -%}
        </div>
      {% for imp in dynamics.common.header %}
        {% include imp %}
      {% endfor %}
      {% for imp in dynamics.notes.header %}
        {% include imp %}
      {% endfor %}
      </header>
      {% for imp in dynamics.common.beforeContent %}
        {% include imp %}
      {% endfor %}
      {% for imp in dynamics.notes.beforeContent %}
        {% include imp %}
      {% endfor %}
      {{ content | hideDataview | taggify | link | safe}}
      {% for imp in dynamics.common.afterContent %}
        {% include imp %}
      {% endfor %}
      {% for imp in dynamics.notes.afterContent %}
        {% include imp %}
      {% endfor %}
    </main>

    {% if settings.dgShowBacklinks === true or settings.dgShowLocalGraph === true or settings.dgShowToc === true%}
      {%include "components/sidebar.njk"%}
    {% endif %}

    {% if settings.dgLinkPreview === true %}
      {%include "components/linkPreview.njk"%}
    {% endif %}
    {% include "components/references.njk" %}
    {% include "components/timestamps.njk" %}
    {% for imp in dynamics.common.footer %}
      {% include imp %}
    {% endfor %}
    {% for imp in dynamics.notes.footer %}
      {% include imp %}
    {% endfor %}
    {%include "components/lucideIcons.njk"%}

    <script>
      // 简约科技感全局点击特效（升级：粒子更少，方块，随机曲线，极限时变红，遮幕聚焦可跟随鼠标）
      let mouseDownTime = 0;
      let focusMask = null;
      let focusMaskActive = false;
      function updateFocusMask(x, y, scale) {
        if (focusMask) {
          focusMask.style.setProperty('--focus-x', x + 'px');
          focusMask.style.setProperty('--focus-y', y + 'px');
          focusMask.style.setProperty('--focus-r', (50 * scale) + 'px');
        }
      }
      document.addEventListener('mousedown', function(e) {
        if (e.button !== 0) return;
        mouseDownTime = Date.now();
        if (focusMaskActive && focusMask) {
          focusMask.remove();
          focusMask = null;
          focusMaskActive = false;
          document.removeEventListener('mousemove', focusMaskMoveHandler);
        }
      }, true);
      document.addEventListener('mouseup', function(e) {
        if (e.button !== 0) return;
        const duration = Math.min(Math.max(Date.now() - mouseDownTime, 80), 1200); // 80~1200ms
        const isMax = duration >= 1200;
        // scale范围：最小1.5，最大3.5
        const scale = 1.5 + (duration - 80) / (1200 - 80) * (3.5 - 1.5);
        // 主色调
        const mainColor = isMax ? '#ff3b3b' : '#00eaff';
        const mainColor2 = isMax ? '#ff7b7b' : '#3b82f6';
        // 遮幕聚焦效果
        if (isMax && !focusMaskActive) {
          focusMask = document.createElement('div');
          focusMask.className = 'click-focus-mask';
          focusMask.style.left = '0';
          focusMask.style.top = '0';
          focusMask.style.width = '100vw';
          focusMask.style.height = '100vh';
          focusMask.style.position = 'fixed';
          focusMask.style.zIndex = '99998';
          focusMask.style.pointerEvents = 'none';
          document.body.appendChild(focusMask);
          focusMaskActive = true;
          updateFocusMask(e.clientX, e.clientY, scale);
          // 跟随鼠标移动
          document.addEventListener('mousemove', focusMaskMoveHandler);
        }
        // 主圆环
        const ripple = document.createElement('div');
        ripple.className = 'cursor-ripple';
        ripple.style.left = e.clientX + 'px';
        ripple.style.top = e.clientY + 'px';
        ripple.style.setProperty('--ripple-scale', scale);
        ripple.style.setProperty('--ripple-main', mainColor);
        ripple.style.setProperty('--ripple-main2', mainColor2);
        document.body.appendChild(ripple);
        setTimeout(() => ripple.remove(), 700);
        // 粒子
        const particleCount = Math.floor(Math.random() * 3) + 3; // 3~5个
        for (let i = 0; i < particleCount; i++) {
          const particle = document.createElement('div');
          particle.className = 'cursor-particle';
          particle.style.left = e.clientX + 'px';
          particle.style.top = e.clientY + 'px';
          // 随机初始角度
          const angle = Math.random() * 2 * Math.PI;
          // 随机远距离，1.5~2.2倍主环
          const dist = (60 + Math.random() * 40) * scale * (1.5 + Math.random()*0.7);
          // 随机贝塞尔控制点
          const ctrlAngle = angle + (Math.random() - 0.5) * Math.PI/2;
          const ctrlDist = dist * (0.4 + Math.random()*0.3);
          // 生成贝塞尔动画路径
          const tx = Math.cos(angle) * dist;
          const ty = Math.sin(angle) * dist;
          const cx = Math.cos(ctrlAngle) * ctrlDist;
          const cy = Math.sin(ctrlAngle) * ctrlDist;
          // 用CSS变量传递
          particle.style.setProperty('--tx', `${tx}px`);
          particle.style.setProperty('--ty', `${ty}px`);
          particle.style.setProperty('--cx', `${cx}px`);
          particle.style.setProperty('--cy', `${cy}px`);
          particle.style.setProperty('--particle-main', mainColor);
          particle.style.setProperty('--particle-main2', mainColor2);
          document.body.appendChild(particle);
          setTimeout(() => particle.remove(), 800);
        }
      });
      // 遮幕随鼠标移动
      function focusMaskMoveHandler(e) {
        if (focusMaskActive && focusMask) {
          updateFocusMask(e.clientX, e.clientY, 2); // scale=2为视觉一致
        }
      }
    </script>

//  图片点击放大
 <style>
      .image-overlay {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: rgba(0, 0, 0, 0.8);
        display: flex;
        justify-content: center;
        align-items: center;
        z-index: 1000;
        overflow: hidden;
      }

      .image-overlay img {
        cursor: grab;
        max-width: 90%;
        max-height: 90%;
        transition: transform 0.1s linear;
        transform-origin: center center;
      }
    </style>

    <script>
      document.addEventListener('DOMContentLoaded', (event) => {
        const images = document.querySelectorAll('.content img');
        images.forEach(image => {
          image.addEventListener('click', () => {
            const overlay = document.createElement('div');
            overlay.classList.add('image-overlay');
            
            const enlargedImage = document.createElement('img');
            enlargedImage.src = image.src;
            
            overlay.appendChild(enlargedImage);
            document.body.appendChild(overlay);

            let scale = 1;
            let panning = false;
            let pointX = 0;
            let pointY = 0;
            let start = { x: 0, y: 0 };

            function setTransform() {
              enlargedImage.style.transform = `translate(${pointX}px, ${pointY}px) scale(${scale})`;
            }

            enlargedImage.addEventListener('mousedown', (e) => {
              e.preventDefault();
              panning = true;
              start = { x: e.clientX - pointX, y: e.clientY - pointY };
              enlargedImage.style.cursor = 'grabbing';
            });

            overlay.addEventListener('mouseup', () => {
              panning = false;
              enlargedImage.style.cursor = 'grab';
            });

            overlay.addEventListener('mouseleave', () => {
                panning = false;
                enlargedImage.style.cursor = 'grab';
            });

            overlay.addEventListener('mousemove', (e) => {
              if (!panning) return;
              pointX = (e.clientX - start.x);
              pointY = (e.clientY - start.y);
              setTransform();
            });

            overlay.addEventListener('wheel', (e) => {
              e.preventDefault();
              const delta = (e.wheelDelta ? e.wheelDelta : -e.deltaY);
              (delta > 0) ? (scale *= 1.2) : (scale /= 1.2);
              setTransform();
            });

            overlay.addEventListener('click', (e) => {
                if (e.target === overlay) {
                    document.body.removeChild(overlay);
                }
            });
          });
        });

        document.addEventListener('keydown', (e) => {
          if (e.key === 'Escape') {
            const overlay = document.querySelector('.image-overlay');
            if (overlay) {
              document.body.removeChild(overlay);
            }
          }
        });
      });
    </script>


  </body>
</html>
