<aside id="floating-control">
    <div class="floating-controls-container">
        <a id="graph-view" onclick="open3DGraph()" data-tooltip="全局3D视图" data-tooltip-position="top" class="control-btn">
            <i class="svg-icon" icon-name="loader" aria-hidden="true"></i>
        </a>

        <span id="graph-fs-btn" class="control-btn" onclick="toggleLocalGraphFullscreen()" data-tooltip="Fullscreen Graph" data-tooltip-position="top">
            <i class="svg-icon" icon-name="expand" aria-hidden="true"></i>
        </span>

        <a id="github" href="https://github.com/UNLINEARITY/Atlas-of-Control-and-AI" data-tooltip="Star On Github" data-tooltip-position="top" class="control-btn">
            <i class="svg-icon" icon-name="star" aria-hidden="true"></i>
        </a>

        {% set sourcePath = page.inputPath | replace('src/site/notes/', '') %}

        <a id="sourcefile" href="https://github.com/UNLINEARITY/Atlas-of-Control-and-AI/tree/main/src/site/notes/{{ sourcePath }}" data-tooltip="View source file" data-tooltip-position="top" target="_blank" class="control-btn">
            <i class="svg-icon" icon-name="file-code" aria-hidden="true"></i>
        </a>

        <a id="donate" href="/A0- 关于该网站/支持本网站/" 
           data-tooltip="Donate or Sponsor" data-tooltip-position="top" class="control-btn">
            <i class="svg-icon" icon-name="heart" aria-hidden="true"></i>
        </a>

        <a id="emailme" href="mailto:unlinearity@gmail.com?subject=Regarding {{title}}&body=Discussing {{meta.siteBaseUrl}}{{permalink}}" 
           data-tooltip="Discuss" data-tooltip-position="top" class="control-btn">
            <i class="svg-icon" icon-name="mail-plus" aria-hidden="true"></i>
        </a>

        <span id="theme-switch" class="control-btn theme-switch-btn">
            <i class="svg-icon light" icon-name="sun" data-tooltip="Light Mode" data-tooltip-position="top" aria-hidden="true"></i>
            <i class="svg-icon dark" icon-name="moon" data-tooltip="Dark Mode" data-tooltip-position="top" aria-hidden="true"></i>
            <i class="svg-icon auto" icon-name="sun-moon" data-tooltip="Auto Mode" data-tooltip-position="top" aria-hidden="true"></i>
        </span>

        <span id="random-page-btn" class="control-btn" data-tooltip="Random-Page" data-tooltip-position="top">
            <i class="svg-icon" icon-name="dice-5" aria-hidden="true"></i>
        </span>
        
        
    </div>
</aside>

<style>
    /* 统一底部浮动控制栏 */
    #floating-control {
        position: fixed;
        left: 50%;
        transform: translateX(-50%);
        bottom: 20px;
        z-index: 1000;
    }

    .floating-controls-container {
        display: flex;
        align-items: center;
        gap: 0.8rem;
        background: var(--background-secondary);
        border: 1px solid var(--background-modifier-border);
        border-radius: 12px;
        padding: 0.5rem;
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
        backdrop-filter: blur(10px);
    }

    /* 统一控制按钮样式 */
    .control-btn {
        display: flex;
        align-items: center;
        justify-content: center;
        width: 44px;
        height: 44px;
        border-radius: 8px;
        cursor: pointer;
        transition: all 0.3s ease;
        color: var(--interactive-accent); /* 使用强调色 */
        background: transparent;
        border: none;
        outline: none;
    }

    .control-btn:hover {
        filter: brightness(1.2); /* 悬停时变亮 */
        transform: translateY(-1px); /* 保持浮动效果 */
    }

    .control-btn:active {
        transform: scale(0.75); /* 点击时缩小 */
        transition: transform 0.1s ease-out; /* 快速反馈 */
    }

    /* 主题切换按钮特殊样式 */
    .theme-switch-btn {
        position: relative;
    }

    .theme-switch-btn .svg-icon {
        position: absolute;
        opacity: 0;
        transition: opacity 0.3s ease;
    }

    .theme-switch-btn.light .svg-icon.light,
    .theme-switch-btn.dark .svg-icon.dark,
    .theme-switch-btn.auto .svg-icon.auto {
        opacity: 1;
    }

    /* 统一图标大小 */
    .control-btn .svg-icon {
        width: 20px;
        height: 20px;
        stroke: currentColor;
        fill: none;
    }

    /* 工具提示样式 */
    [data-tooltip] {
        position: relative;
        cursor: pointer;
    }

    [data-tooltip]::after {
        content: attr(data-tooltip);
        position: absolute;
        white-space: nowrap;
        padding: 6px 10px;
        background: var(--background-modifier-hover);
        color: var(--text-normal);
        border-radius: 6px;
        font-size: 12px;
        font-weight: 500;
        opacity: 0;
        transition: all 0.3s ease;
        pointer-events: none;
        z-index: 1000;
        border: 1px solid var(--background-modifier-border);
        box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
    }

    [data-tooltip][data-tooltip-position="top"]::after {
        bottom: 100%;
        left: 50%;
        transform: translateX(-50%);
        margin-bottom: 8px;
    }

    [data-tooltip]:hover::after {
        opacity: 1;
    }

    /* 动画效果 */
    @keyframes jelly {
        0%, 100% { transform: scale(1, 1); }
        25% { transform: scale(0.9, 1.1); }
        50% { transform: scale(1.1, 0.9); }
        75% { transform: scale(0.95, 1.05); }
    }

    .control-btn:hover .svg-icon {
        animation: jelly 0.6s ease-in-out;
    }



    /* 响应式设计 */
    @media (max-width: 768px) {
        #floating-control {
            left: 50%;
            transform: translateX(-50%);
            bottom: 15px;
        }
        
        .floating-controls-container {
            gap: 0.5rem;
            padding: 0.4rem;
        }
        
        .control-btn {
            width: 40px;
            height: 40px;
        }
        
        .control-btn .svg-icon {
            width: 18px;
            height: 18px;
        }
        
    }

    @media (max-width: 480px) {
        #floating-control {
            left: 50%;
            transform: translateX(-50%);
            bottom: 15px;
        }
        
        .floating-controls-container {
            gap: 0.4rem;
            padding: 0.3rem;
        }
        
        .control-btn {
            width: 36px;
            height: 36px;
        }
        
        .control-btn .svg-icon {
            width: 16px;
            height: 16px;
        }
        

    }

    /* 主题通知样式 - 与新设计统一 */
    .theme-notification {
        position: fixed;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        background: var(--background-secondary);
        color: var(--text-normal);
        padding: 12px 20px;
        border-radius: 12px;
        display: flex;
        align-items: center;
        gap: 10px;
        font-size: 1.1em;
        font-weight: 600;
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
        opacity: 0;
        visibility: hidden;
        transition: all 0.3s ease;
        z-index: 9999;
        border: 1px solid var(--background-modifier-border);
        backdrop-filter: blur(10px);
    }
    
    .theme-notification .svg-icon {
        width: 20px;
        height: 20px;
        fill: var(--interactive-accent);
    }
</style>

<script>
    // --- 优化后的随机跳转逻辑 ---

    // 1. 在脚本加载时就准备好页面列表和相关函数
    let allPages = [];
    let isFetchingPages = false;

    async function fetchPages() {
        if (allPages.length > 0 || isFetchingPages) {
            return; // 如果已经有数据或正在获取中，则不重复执行
        }
        isFetchingPages = true;
        try {
            // 优先尝试从 window.docs 获取
            if (window.docs && window.docs.length > 0) {
                allPages = window.docs;
            } else {
                // 否则从 searchIndex.json 获取
                const response = await fetch('/searchIndex.json');
                if (!response.ok) throw new Error('Network response was not ok');
                allPages = await response.json();
            }
        } catch (error) {
            console.error("Failed to fetch page list for random jump:", error);
            allPages = []; // 出错时置空
        } finally {
            isFetchingPages = false;
        }
    }

    // 页面加载后立即开始获取列表，不阻塞页面渲染
    document.addEventListener('DOMContentLoaded', fetchPages);

    function getRandomPageUrl() {
        if (!allPages || allPages.length === 0) {
            return null; // 没有页面数据
        }

        if (allPages.length === 1) {
            return allPages[0].permalink || allPages[0].url;
        }

        let randomPage;
        let targetUrl = '';
        const currentPath = window.location.pathname;

        // 循环直到找到一个与当前页面不同的 URL
        do {
            const idx = Math.floor(Math.random() * allPages.length);
            randomPage = allPages[idx];
            targetUrl = randomPage.permalink || randomPage.url || randomPage.path || randomPage.dgPath || '';
        } while (targetUrl === currentPath);

        return targetUrl;
    }

    const randomBtn = document.getElementById('random-page-btn');
    if (randomBtn) {
        randomBtn.addEventListener('click', function() {
            const targetUrl = getRandomPageUrl();

            if (targetUrl) {
                showThemeNotification('Jumping to Random Page', 'dice-5');
                setTimeout(() => {
                    window.location.href = targetUrl;
                }, 300);
            } else {
                // 2. 使用统一的通知样式来提示错误
                showThemeNotification('Failed to find a page', 'alert-circle');
            }
        });
    }


    // --- 原有的其他逻辑（主题切换、按钮动画等）保持不变 ---

    // Theme Notification Elements
    const themeNotification = document.createElement('div');
    themeNotification.id = 'theme-notification';
    themeNotification.className = 'theme-notification';
    themeNotification.innerHTML = `
        <i class="svg-icon" id="notification-icon" aria-hidden="true"></i>
        <span id="notification-text"></span>
    `;
    document.body.appendChild(themeNotification);

    const notificationIcon = document.getElementById('notification-icon');
    const notificationText = document.getElementById('notification-text');
    let notificationTimeout;

    function showThemeNotification(themeDisplayName, iconName) {
        clearTimeout(notificationTimeout);
        notificationIcon.setAttribute('icon-name', iconName);
        notificationText.textContent = themeDisplayName;
        if (typeof lucide !== 'undefined' && lucide.createIcons) {
            lucide.createIcons();
        }
        themeNotification.style.opacity = '1';
        themeNotification.style.visibility = 'visible';
        notificationTimeout = setTimeout(() => {
            themeNotification.style.opacity = '0';
            themeNotification.style.visibility = 'hidden';
        }, 300);
    }

    function setThemeIcon(theme, showNotification = false) {
        let iconName;
        let themeDisplayName;
        const themeSwitchElement = document.getElementById('theme-switch');
        themeSwitchElement.classList.remove('dark', 'light', 'auto');
        switch (theme) {
            case 'dark':
                themeSwitchElement.classList.add('dark');
                iconName = 'moon';
                themeDisplayName = 'Dark Mode';
                break;
            case 'light':
                themeSwitchElement.classList.add('light');
                iconName = 'sun';
                themeDisplayName = 'Light Mode';
                break;
            default:
                themeSwitchElement.classList.add('auto');
                iconName = 'sun-moon';
                themeDisplayName = 'Auto Mode';
                break;
        }
        if (showNotification) {
            showThemeNotification(themeDisplayName, iconName);
        }
    }

    function setTheme(theme, setIcon, showNotification = false) {
        if (setIcon) {
            setThemeIcon(theme, showNotification);
        }
        if (theme == 'dark') {
            document.body.classList.remove('theme-light');
            document.body.classList.add('theme-dark');
        } else if (theme == "light") {
            document.body.classList.add('theme-light');
            document.body.classList.remove('theme-dark');
        } else {
            theme = (window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches) ? 'dark' : 'light';
            setTheme(theme, false, showNotification);
        }
    }
    let theme = window.localStorage.getItem('site-theme') || "light";
    setTheme(theme, true, false);
    window.theme = theme;
    window.localStorage.setItem('site-theme', theme);

    window.matchMedia('(prefers-color-scheme: dark)').addEventListener('change', function(event) {
        const settings = window.localStorage.getItem('site-theme');
        if (!settings || settings == "auto") {
            window.localStorage.setItem('site-theme', "auto");
            setTheme("auto", true, true);
        }
    });
    document.getElementById('theme-switch').addEventListener('click', function() {
        let theme;
        if (window.theme == 'auto') {
            theme = "dark";
        } else if (window.theme == 'dark') {
            theme = 'light'
        } else {
            theme = 'auto';
        }
        setTheme(theme, true, true);
        window.localStorage.setItem('site-theme', theme);
        window.theme = theme;
    })

    function open3DGraph() {
        showThemeNotification('Opening 3D Graph', 'loader');
        setTimeout(() => {
            window.location.href = '/3D-graph/';
        }, 300);
    }

    const githubBtn = document.getElementById('github');
    if (githubBtn) {
        githubBtn.addEventListener('click', function(event) {
            event.preventDefault();
            showThemeNotification('Starring on Github', 'star');
            setTimeout(() => {
                window.open(githubBtn.href, '_blank');
            }, 300);
        });
    }

    const sourcefileBtn = document.getElementById('sourcefile');
    if (sourcefileBtn) {
        sourcefileBtn.addEventListener('click', function(event) {
            event.preventDefault();
            showThemeNotification('Opening Source File', 'file-code');
            setTimeout(() => {
                window.open(sourcefileBtn.href, '_blank');
            }, 300);
        });
    }

    const donateBtn = document.getElementById('donate');
    if (donateBtn) {
        donateBtn.addEventListener('click', function(event) {
            event.preventDefault();
            showThemeNotification('Redirecting to Donation Page', 'heart');
            setTimeout(() => {
                window.location.href = donateBtn.href;
            }, 300);
        });
    }

    const emailBtn = document.getElementById('emailme');
    if (emailBtn) {
        emailBtn.addEventListener('click', function(event) {
            event.preventDefault();
            showThemeNotification('Opening Email Client', 'mail-plus');
            setTimeout(() => {
                window.location.href = emailBtn.href;
            }, 300);
        });
    }

    document.addEventListener('keydown', function(event) {
        if (event.ctrlKey && event.key === 'g') {
            event.preventDefault();
            const graphFsBtn = document.getElementById('graph-fs-btn');
            if (graphFsBtn) {
                graphFsBtn.click();
            }
        }
    });

    function toggleLocalGraphFullscreen() {
        window.dispatchEvent(new CustomEvent('toggle-graph-fullscreen'));
    }
</script>